How To Dockatron10XD

# A. PreDocking Procedures

Part 0
Copy the Dockatron10XD package and rename the folder after your own project.
Download and install all necessary software.

Part 1
1. Move your trajectory file (.dcd) and input coordinate file (pdb) into /PreDocking/
2. Create 'LigandPDBQTs' and 'ReceptorPDBQTs' directories in /Dockatron10XD/PreDocking/
3. Move your Ligand PDBQT files to /Dockatron10XD/PreDocking/LigandPDBQTs/
4. Edit PreDocking_part1.tcl 
	- line 5 - dcd filename, first, last, step, waitfor  
	- line 9 - pdb filename, first, last, step, waitfor
	for more details see VMD User Guide 9.3.20 'mol': http://www.ks.uiuc.edu/Research/vmd/current/ug/node140.html 
5. From the command line (WSL/Bash), move to /Dockatron10XD/PreDocking/ and enter the following command:
	
	vmd -dispdev text -eofexit < PreDocking_part1.tcl > PreDocking_part1.log
	
6. From /ReceptorPDBQTs/, convert your Receptor PDB files to PDBQT files using Open Babel or AutoDockTools
7. Move your Receptor PDB files to archive
	
Expected Output:
LigandPDBQTs/		-containing your ligand PDBQT files
Step1A.log		-VMD logging output
center.dat		-center xyz coordinates of protein in each frame of trajectory
minMax.dat		-minimum and maximum xyz coordinates of protein in each frame of trajectory
rmsd.dat		-rmsd values for each frame in the trajectory
ReceptorPDBQTs/	-containing the receptor pdb files created from running Step1A.tcl

Part 2
1. From /Dockatron10XD/PreDocking/, enter the following command into the command line:

python Step2.py --rmsd_dat 'rmsd.dat path' --minMax_dat 'minMax.dat path' --center_dat 'center.dat path' --extra <integer> --num_modes <integer> --cpu <integer> --exhaust <integer>

2. Copy all .conf files to /Docking_Job/
3. Copy all ligand pdbqt files to /Docking_Job/
4. Copy all receptor pdbqt files to /Docking_Job/

Expected Output:
RMSD Graph				-pops up in separate window
rand10 					-randomly selected frame numbers (printed to command line - aid in 'clustered' structure selection)
.conf files				-configuration files for each receptor pdb
Receptor PDBQT files 	-in /ReceptorPDBQTs/ and in /Docking_Job/ directories
Ligand PDBQT files		-in /LigandPDBQTs/ and in /Docking_Job/ directories



# B. Docking_Job Procedures - With Windows HPC Cluster Manager

Part 1
1. Run docking_job.bash to set up the file structure needed to run your docking job.
2. Upload Docking_Job directory onto cluster

Part 2
1. Set up a parametric sweep docking job (run multiple docking calculations in parallel)
	https://docs.microsoft.com/en-us/previous-versions/orphan-topics/ws.10/ff919702%28v%3dws.10%29



# C. PostDocking Procedurs

Part 1
1. Download your docking results from the cluster

Part 2
1. Organize ouput files
2. Convert ligand pdbqt output into pdb files


Part 3
1. Generate pocket_residus.txt
2. Assign Binding Sites
	a. The script is assign_binding_sites.py
		The command line parameters are:
			--l Ligand directory 
			--r Receptor directory
	
	b. The ligand directory contains the ligand pdb files named 
			Ligand_<Num>_<Rec>_Pose.pdb *
			* These can be in sub directories
	
	c. The receptor directory contains the receptor conformation pdb files named
			<Rec>.pdb
			and a pocket_residues.txt file
	
	f. The pocket_residues files is in the following format:
		<pocket num>,<start residue number>-<end residue number>,*
			* repeat residue ranges as needed
	
	g. Temporary output files are created for inspection in the receptor directory
		<Rec>_sidechains.txt		a file with the side chains extracted from the pdb file
		<Rec>_binding_sites.txt		a file with the atoms that are part of the binding sites
						binding site number is added as last column with \t
		rec_pocket_centers.txt		a file with computed binding centers for each pocket
						the script will check this file against the receptor files in the path
						and skip computations for the binding sites if the record is in this file
		
	
	h. The final output is in the ligand directory
		ligand_binding_sites.txt	a tab separated file with header and columns <Ligand Pose Receptor BindSite>
	
	i. A log file is saved in the directory that the script is stored.	
	
	Example command:
	python assign_binding_sites.py --l 'C:\Users\aarid\Set3_Results\ligands\' --r 'C:\Users\aarid\Set3_Results\receptors'
	
3. Ligand Binding Sites Analysis
	a. The script is Ligand_Sites_Analysis.py 
		The command line parameters are:
			--ligand_sites	'<Path to ligand_binding_sites.txt>'
			--ligand_ID		'Ligand identifier'
	b. Two windows containing graphs will pop up consecutively -- save those!
	c. A loge file containing the same information that is printed on the console is saved in the directory that the script is stored.
	
	Example command:	
	python Ligand_Sites_Analysis.py --ligand_sites 'C:\Users\aarid\Set3_Results\ligand_binding_sites5_5000.txt' --ligand_ID 'L23'